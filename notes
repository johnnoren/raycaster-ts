


Length and width of array must be odd since there needs to be a wall between every cell.

Use gpt as an assistant. It can give me info and it can write methods I clearly define. It can also write tests I clearly define. So see it as a way to speed up my work, not a way to outsource work. I just shift my focus to design/architecture. Divide the app into parts/modules with a clear api and then create small, general, re-usable objects. Create the re-usable objects through TDD. Break complicated algorithms etc. down into smaller parts.

Try to work systematically so that I find a good workflow for working with gpt and copilot. For example I can description of a method I want to create and have gpt help me create a prompt for it by having it asking me questions. Maybe even have gpt create a description of it first through questions. Then that description can be used to ask chatgpt to create a list of suitable test cases and then those can be implemented one at a time. I need a process for working with gpt. Start with something simple based on the above and then continously improve the workflow. For example maybe stop after each "run" of the workflow and analyze what worked and what didn't and what could be improved.


1. Generate a 2d array of the wanted size, length and height must be odd numbers.
2. Fill it with wall (1).
3. Number cells:
- Perimeter intersection cells are ignored since they are part of the outer wall.
- Inner regular cells. Set values sequentially, starting from 0.
- Inner intersection cells. Put the positions in a list.
4. Repeat until the list with inner intersection cells (IIC) is empty:
    1. Take random IIC
    2. If the IIC’s two neighboring cells have different values, merge them by:
		    1. Taking lowest value and setting all cells in the array with the highest value to the lowest value. 
        2. Setting the value of the IIC to the lowest value.
    
This way the continual merging of cells will result in them having value 0 which is space, while leaving some IIC’s with value 1 which is wall.
5. To create exit(s) just take any perimeter intersection cell(s) and fill with space/door/whatever.